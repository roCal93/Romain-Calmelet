// Import necessary Sass modules
@use 'sass:color'; // Module for color manipulation
@use 'sass:math'; // Module for mathematical operations
@use '../../styles/variables.module.scss' as *; // Import global project variables

// ========================================
// COLOR VARIANT CREATION
// ========================================

// Brightness variants of the primary color
$local-primary-light: color.scale(
  $primary,
  $lightness: 30%
); // Lighter version (+30%)
$local-primary-lighter: color.scale(
  $primary,
  $lightness: 60%
); // Much lighter version (+60%)
$local-primary-dark: color.scale(
  $primary,
  $lightness: -20%
); // Darker version (-20%)

// Transparency (alpha) variants
$local-primary-10: color.change($primary, $alpha: 0.1); // 10% opacity
$local-primary-05: color.change($primary, $alpha: 0.05); // 5% opacity
$local-primary-30: color.change($primary, $alpha: 0.3); // 30% opacity

// Hue variants (color temperature)
$local-primary-warm: color.adjust(
  $primary,
  $hue: 15deg
); // Warm version (+15° on color wheel)
$local-primary-cool: color.adjust(
  $primary,
  $hue: -15deg
); // Cool version (-15° on color wheel)

// ========================================
// BACKGROUND CONTAINER
// ========================================
.backgroundContainer {
  position: fixed; // Fixed to viewport
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  overflow: hidden; // Hide overflowing content
  z-index: -1; // Behind all other elements
  background: radial-gradient(
    ellipse at center,
    #ffffff 0%,
    #f5f5f5 100%
  ); // Radial gradient from white to light gray
}

// ========================================
// MOUSE-FOLLOWING GLOW EFFECT
// ========================================
.mouseGlow {
  position: absolute;
  width: 600px;
  height: 600px;
  // Circular radial gradient with transparent primary colors
  background: radial-gradient(
    circle,
    $local-primary-10 0%,
    // Center: 10% opacity
    $local-primary-05 30%,
    // Middle: 5% opacity
    transparent 70% // Outer: transparent
  );
  border-radius: 50%; // Circular shape
  pointer-events: none; // Doesn't intercept clicks
  opacity: 0; // Initially invisible
  animation: fadeIn 1s ease-out forwards; // Fade-in animation
  z-index: 1;
  mix-blend-mode: multiply; // Blend mode for subtle effect

  // Responsive: reduced size on mobile
  @media (max-width: 768px) {
    width: 400px;
    height: 400px;
  }
}

// Fade-in animation
@keyframes fadeIn {
  to {
    opacity: 1;
  }
}

// ========================================
// MORPHING SHAPES WRAPPER
// ========================================
.morphWrapper {
  position: absolute;
  width: 100%;
  height: 100%;
  filter: blur(40px); // Heavy blur for soft effect
  opacity: 0.4; // Semi-transparent
}

// ========================================
// ANIMATED SHAPES (MORPHS)
// ========================================
// Common styles for all three shapes
.morph1,
.morph2,
.morph3 {
  position: absolute;
  width: 400px;
  height: 400px;
  border-radius: 50%; // Base circular shape
  transition: transform 0.3s ease-out; // Smooth transition
  will-change: transform; // Performance optimization

  // Responsive: reduced size on mobile
  @media (max-width: 768px) {
    width: 300px;
    height: 300px;
  }
}

// First morphing shape
.morph1 {
  // Gradient from primary color to its lighter version
  background: linear-gradient(135deg, $primary 0%, $local-primary-light 100%);
  top: -20%; // Positioned top-left (partially off-screen)
  left: -10%;
  animation: morph1 10s ease-in-out infinite; // 10s looping animation
}

// Second morphing shape
.morph2 {
  // Gradient using color mixing
  background: linear-gradient(
    135deg,
    $local-primary-light 0%,
    color.mix($primary, white, 30%) 100% // Mix 30% primary + 70% white
  );
  bottom: -20%; // Positioned bottom-right (partially off-screen)
  right: -10%;
  animation: morph2 10s ease-in-out infinite;
}

// Third morphing shape
.morph3 {
  // Gradient using warm color variant
  background: linear-gradient(
    135deg,
    $local-primary-warm 0%,
    color.scale($local-primary-warm, $lightness: 40%) 100%
      // Lighter version of warm color
  );
  top: 50%; // Centered vertically and horizontally
  left: 50%;
  transform: translate(-50%, -50%); // Perfect centering
  animation: morph3 10s ease-in-out infinite;
}

// ========================================
// MORPHING SHAPE ANIMATIONS
// ========================================

// First shape animation: rotation and deformation
@keyframes morph1 {
  0%,
  100% {
    border-radius: 50% 50% 50% 50%; // Perfect circle
    transform: translate(0, 0) rotate(0deg);
  }
  33% {
    // Asymmetric deformation and movement
    border-radius: 30% 70% 70% 30% / 30% 30% 70% 70%;
    transform: translate(100px, 50px) rotate(120deg);
  }
  66% {
    // Different deformation and rotation
    border-radius: 70% 30% 30% 70% / 70% 70% 30% 30%;
    transform: translate(-50px, 100px) rotate(240deg);
  }
}

// Second shape animation: rotation and scaling
@keyframes morph2 {
  0%,
  100% {
    border-radius: 50% 50% 50% 50%;
    transform: translate(0, 0) rotate(0deg) scale(1);
  }
  50% {
    // Deformation, movement and scaling up
    border-radius: 70% 30% 50% 50% / 50% 50% 30% 70%;
    transform: translate(-100px, -100px) rotate(180deg) scale(1.1);
  }
}

// Third shape animation: complex transformations
@keyframes morph3 {
  0%,
  100% {
    border-radius: 50% 50% 50% 50%;
    transform: translate(-50%, -50%) scale(1);
  }
  25% {
    border-radius: 80% 20% 60% 40% / 40% 60% 20% 80%;
    transform: translate(-30%, -70%) scale(0.8);
  }
  50% {
    border-radius: 20% 80% 40% 60% / 60% 40% 80% 20%;
    transform: translate(-70%, -30%) scale(1.2);
  }
  75% {
    border-radius: 60% 40% 80% 20% / 20% 80% 40% 60%;
    transform: translate(-40%, -60%) scale(0.9);
  }
}

// ========================================
// FLOATING DOTS CONTAINER
// ========================================
.dotsContainer {
  position: absolute;
  width: 100%;
  height: 100%;
}

// ========================================
// ANIMATED DOTS
// ========================================
.dot {
  position: absolute;
  width: 4px;
  height: 4px;
  background: $local-primary-30; // 30% opacity by default
  border-radius: 50%; // Circular shape
  transition: transform 0.2s ease-out;
  will-change: transform; // Performance optimization

  // Variations for odd-numbered dots
  &:nth-child(odd) {
    background: color.change($primary, $alpha: 0.25); // 25% opacity
  }

  // Variations for every 3rd dot
  &:nth-child(3n) {
    background: color.change($primary, $alpha: 0.35); // 35% opacity
    width: 5px; // Slightly larger
    height: 5px;
  }

  // Variations for every 5th dot
  &:nth-child(5n) {
    background: color.change(
      $local-primary-light,
      $alpha: 0.3
    ); // Light primary at 30% opacity
    width: 3px; // Slightly smaller
    height: 3px;
  }

  // Generate positions for each dot (1-12)
  @for $i from 1 through 12 {
    &.dot#{$i} {
      $top: math.random(80) + 10; // Random top position between 10-90%
      $left: math.random(80) + 10; // Random left position between 10-90%
      top: $top * 1%;
      left: $left * 1%;
      // Unique animation for each dot with random duration and delay
      animation: dotFloat#{$i}
        (17s + math.random(7))
        // Duration: 17-24s
        linear
        infinite
        (math.random(4) + s); // Delay: 0-4s
    }
  }
}

// Generate floating animations for dots
@for $i from 1 through 12 {
  @keyframes dotFloat#{$i} {
    0% {
      transform: translate(0, 0);
      opacity: 0; // Start invisible
    }
    10% {
      opacity: 1; // Fade in
    }
    90% {
      opacity: 1; // Stay visible
    }
    100% {
      // Random end position within 160px range
      $x: (math.random(160) - 80) * 1px;
      $y: (math.random(160) - 80) * 1px;
      transform: translate($x, $y);
      opacity: 0; // Fade out
    }
  }
}

// ========================================
// PERFORMANCE AND ACCESSIBILITY
// ========================================
// Disable animations for users who prefer reduced motion
@media (prefers-reduced-motion: reduce) {
  .morphWrapper,
  .dot {
    animation: none !important;
  }
}
